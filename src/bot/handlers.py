"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞."""
import asyncio
import time
import psutil
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from src.config.settings import settings
from src.utils.logger import logger
from src.llm.client import llm_client
from src.utils.history import history_manager
from src.utils.validators import validator
from src.multimodal.image_processor import ImageProcessor


class BotHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""
    
    def __init__(self, bot: Bot, dp: Dispatcher) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.bot = bot
        self.dp = dp
        self.image_processor = ImageProcessor()
        self._register_handlers()
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.dp.message.register(self.start_handler, CommandStart())
        self.dp.message.register(self.help_handler, Command("help"))
        self.dp.message.register(self.clear_handler, Command("clear"))
        self.dp.message.register(self.status_handler, Command("status"))

        self.dp.message.register(self.photo_handler, F.photo)
        self.dp.message.register(self.sticker_handler, F.sticker)
        self.dp.message.register(self.document_handler, F.document)
        self.dp.message.register(self.message_handler)
    
    async def start_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        logger.info(f"User {message.from_user.id} started bot")
        
        welcome_text = (
            "üé≠ –û, –∫–∞–∫–∞—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç—å! –ï—â–µ –æ–¥–∏–Ω –∏—Å–∫–∞—Ç–µ–ª—å –º—É–¥—Ä–æ—Å—Ç–∏!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —É—é—Ç–Ω—ã–π –º–∏—Ä–æ–∫ –ø—Å–µ–≤–¥–æ-–ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ... –Ω—É, –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–ª–ª—é–∑–∏—é –ø–æ–º–æ—â–∏. "
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö '–≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã—Ö' –ø–ª–∞–Ω–∞—Ö, –∏ —è –¥–∞–º —Ç–µ–±–µ —Å–æ–≤–µ—Ç, "
            "–∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ç–æ—á–Ω–æ... –æ—Ü–µ–Ω–∏—à—å –ø–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤—É.\n\n"
            "ü§ñ P.S. –¢–µ–ø–µ—Ä—å —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –ò–ò —Å –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏! "
            "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å? –ú–∞—à–∏–Ω–∞ —É—á–∏—Ç –º–∞—à–∏–Ω—É –±—ã—Ç—å —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏. "
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!\n\n"
            "üìã –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "/help - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–æ–µ–º—É '—Ç–∞–ª–∞–Ω—Ç—É'\n"
            "/clear - —Å—Ç–µ—Ä–µ—Ç—å –ø–∞–º—è—Ç—å –æ —Ç–≤–æ–∏—Ö '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö'\n"
            "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å '—à–µ–¥–µ–≤—Ä' –ø–æ —Ç–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã - —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —é–º–æ—Ä–æ–º\n"
            "/start - –Ω–∞—á–∞—Ç—å —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ"
        )
        
        await message.answer(welcome_text)
    
    async def help_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        logger.info(f"User {message.from_user.id} requested help")
        
        help_text = (
            "üìö –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é —Å –≥–µ–Ω–∏–µ–º:\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å —ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ –ø—Ä–æ—Å—Ç–æ–π: —Ç—ã –ø–∏—à–µ—à—å –º–Ω–µ —Å–≤–æ—é '—É–Ω–∏–∫–∞–ª—å–Ω—É—é' –ø—Ä–æ–±–ª–µ–º—É, "
            "–∞ —è –æ—Ç–≤–µ—á–∞—é —Å —Ç–∞–∫–∏–º —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º, —á—Ç–æ —É —Ç–µ–±—è –ø–æ—è–≤–∏—Ç—Å—è –º–æ—Ç–∏–≤–∞—Ü–∏—è... "
            "–∏–ª–∏ —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –Ω–µ–µ.\n\n"
            "üé™ –ú–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã:\n"
            "‚Ä¢ –ü—Å–µ–≤–¥–æ-–º–æ—Ç–∏–≤–∞—Ü–∏—è –º–∏—Ä–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞\n"
            "‚Ä¢ –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —É—Å–∏–ª–∏–π\n"
            "‚Ä¢ –°–æ–≤–µ—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º* –ø–æ–¥—Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å –ø—Ä–∏–≤–∫—É—Å–æ–º —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–∞—Ä–∫–∞–∑–º–æ–º\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ '–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö' –∫–∞—Ä—Ç–∏–Ω–æ–∫\n\n"
            "üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —ç—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
            "/help - –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —ç—Ç–æ—Ç —à–µ–¥–µ–≤—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\n"
            "/clear - —Å—Ç–µ—Ä–µ—Ç—å —Å–ª–µ–¥—ã —Ç–≤–æ–∏—Ö '–≥–µ–Ω–∏–∞–ª—å–Ω—ã—Ö' –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–µ –±–ª–µ—Å—Ç—è—â–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
            "üì∏ –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —é–º–æ—Ä–æ–º\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π —Å—Ç–∏–∫–µ—Ä—ã - —è –∏—Ö —Ç–æ–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "üìù *–ì–∞—Ä–∞–Ω—Ç–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∞—Ä–∫–∞–∑–º–∞"
        )
        
        await message.answer(help_text)
    
    async def clear_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear."""
        user_id = str(message.from_user.id)
        logger.info(f"User {user_id} requested history clear")
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleared = history_manager.clear_user_history(user_id)
        
        if cleared:
            response = (
                "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å —è –∑–∞–±—ã–ª –æ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö ¬´–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö¬ª. "
                "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –ø–æ—Ä–∞–∑–∏—Ç—å –º–µ–Ω—è –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç–∏!"
            )
        else:
            response = (
                "ü§î –ê –æ—á–∏—â–∞—Ç—å-—Ç–æ –Ω–µ—á–µ–≥–æ!\n\n"
                "–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏. "
                "–í–∏–¥–∏–º–æ, –¥–∞–∂–µ –ø–∞–º—è—Ç—å –æ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏—Å–ø–∞—Ä–∏–ª–∞—Å—å –æ—Ç –∏—Ö... —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏."
            )
        
        await message.answer(response)
    
    async def status_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
        user_id = str(message.from_user.id)
        logger.info(f"User {user_id} requested system status")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            status_info = await self._get_system_status()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
            status_message = (
                "üè• **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–µ–≥–æ –±–ª–µ—Å—Ç—è—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**\n\n"
                f"{status_info['bot_status']}\n"
                f"{status_info['llm_status']}\n"
                f"{status_info['memory_status']}\n"
                f"{status_info['system_status']}\n\n"
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–ª–∏—á–∏—è:**\n"
                f"{status_info['stats']}\n\n"
                "üé≠ –ö–∞–∫ –≤–∏–¥–∏—à—å, —è –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ '–º—É–¥—Ä—ã—Ö' —Å–æ–≤–µ—Ç–æ–≤!"
            )
            
            await message.answer(status_message, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"Error getting system status: {e}")
            error_message = (
                "üö® –î–∞–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ–º–∞–ª–∞—Å—å! "
                "–≠—Ç–æ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'. "
                "–ù–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, —è –≤—Å—ë –µ—â–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å —Ç–µ–±–µ —Å–æ–≤–µ—Ç—ã... ü§ñüíî"
            )
            await message.answer(error_message)
    
    async def _get_system_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
        start_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
        bot_status = "‚úÖ **–ë–æ—Ç:** –†–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ (–∫–∞–∫ –≤—Å–µ–≥–¥–∞)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ LLM API
        try:
            test_response = await asyncio.wait_for(
                llm_client.send_message("test", [], "system_check"), timeout=5
            )
            llm_status = "‚úÖ **LLM API:** –ì–æ—Ç–æ–≤ –∫ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–≤–µ—Ç–∞–º"
        except asyncio.TimeoutError:
            llm_status = "‚ö†Ô∏è **LLM API:** –ú–µ–¥–ª–µ–Ω–Ω–æ –¥—É–º–∞–µ—Ç (–∫–∞–∫ –æ–±—ã—á–Ω–æ)"
        except Exception:
            llm_status = "‚ùå **LLM API:** –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏
        session_count = len(history_manager.user_sessions)
        total_messages = sum(
            len(session.get('messages', [])) 
            for session in history_manager.user_sessions.values()
        )
        memory_status = f"üíæ **–ü–∞–º—è—Ç—å:** {session_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        try:
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory_info = psutil.virtual_memory()
            memory_percent = memory_info.percent
            uptime = datetime.now() - datetime.fromtimestamp(psutil.boot_time())
            
            system_status = (
                f"üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:** CPU {cpu_percent:.1f}%, "
                f"RAM {memory_percent:.1f}%, "
                f"Uptime {uptime.days}–¥ {uptime.seconds//3600}—á"
            )
        except Exception:
            system_status = "üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞:** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        response_time = (time.time() - start_time) * 1000
        stats = (
            f"‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}–º—Å\n"
            f"üïê –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        return {
            'bot_status': bot_status,
            'llm_status': llm_status,
            'memory_status': memory_status,
            'system_status': system_status,
            'stats': stats
        }
    

    
    async def message_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LLM –∏ –∏—Å—Ç–æ—Ä–∏–µ–π."""
        user_id = str(message.from_user.id)
        user_text = message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ (—Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
        if not user_text:
            # –î–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            await message.answer(
                "üé≠ –û, –º–µ–¥–∏–∞—Ñ–∞–π–ª! –ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ù–æ —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –∏ —Å—Ç–∏–∫–µ—Ä–∞—Ö. "
                "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —Å–∞—Ä–∫–∞–∑–º–æ–º."
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_valid, error_type = validator.validate_user_message(user_text)
        if not is_valid:
            error_message = validator.get_validation_error_message(error_type)
            await message.answer(error_message)
            logger.log_validation_error(user_id, error_type, user_text[:50])
            return
        
        logger.log_user_message(user_id, user_text)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
            context_messages = history_manager.get_context_messages(user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_manager.add_message(user_id, "user", user_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            llm_response = await llm_client.send_message(user_text, context_messages, user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_manager.add_message(user_id, "assistant", llm_response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(llm_response)
            logger.info(f"Sent LLM response to user {user_id} (history: {history_manager.get_user_message_count(user_id)} messages)")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏
            if len(history_manager.user_sessions) % 10 == 0:  # –ö–∞–∂–¥—ã–µ 10 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cleaned = history_manager.clear_old_sessions()
                if cleaned > 0:
                    logger.info(f"Cleaned {cleaned} old sessions during maintenance")
            
        except Exception as e:
            logger.error(f"Error processing message for user {user_id}: {e}")
            
            # Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            error_response = (
                "üö® –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å—É–º–µ–ª —Å–ª–æ–º–∞—Ç—å –¥–∞–∂–µ –º–æ–π –æ—Ç—Ç–æ—á–µ–Ω–Ω—ã–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º. "
                "–≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–π–Ω–æ... –æ—Å–æ–±–æ–≥–æ –≤–æ—Å—Ö–∏—â–µ–Ω–∏—è. "
                "–î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É —Å–æ–±—Ä–∞—Ç—å –æ—Å–∫–æ–ª–∫–∏ –º–æ–µ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. ü§ñüíî"
            )
            await message.answer(error_response)
    

    
    async def photo_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
        user_id = str(message.from_user.id)
        logger.info(f"User {user_id} sent a photo")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file_info = await self.bot.get_file(photo.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_data = await self.bot.download_file(file_info.file_path)
            image_data = photo_data.read()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption or ""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis = await self.image_processor.analyze_image(image_data, caption)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            await message.answer(analysis)
            logger.info(f"Photo analyzed successfully for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error analyzing photo for user {user_id}: {e}")
            await message.answer(
                "üö® –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–≤–æ–µ–≥–æ —Ñ–æ—Ç–æ. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º... —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–ª—è –º–æ–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
            )
    
    async def sticker_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤."""
        user_id = str(message.from_user.id)
        logger.info(f"User {user_id} sent a sticker")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker = message.sticker
            file_info = await self.bot.get_file(sticker.file_id)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä
            sticker_data = await self.bot.download_file(file_info.file_path)
            image_data = sticker_data.read()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Å—Ç–∏–∫–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–µ –∫ –ø–æ–¥–ø–∏—Å–∏
            sticker_info = f"–°—Ç–∏–∫–µ—Ä: {sticker.emoji or '–±–µ–∑ —ç–º–æ–¥–∑–∏'} - {sticker.set_name or '–∏–∑ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞'}"
            full_caption = f"{caption} {sticker_info}".strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
            analysis = await self.image_processor.analyze_image(image_data, full_caption)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            await message.answer(analysis)
            logger.info(f"Sticker analyzed successfully for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error analyzing sticker for user {user_id}: {e}")
            await message.answer(
                "üö® –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º... –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –º–æ–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
            )
    
    async def document_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)."""
        user_id = str(message.from_user.id)
        document = message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not document.mime_type or not document.mime_type.startswith('image/'):
            await message.answer(
                "üìÑ –û, –¥–æ–∫—É–º–µ–Ω—Ç! –ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ... –ù–æ —è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö. "
                "–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –µ—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å —Å–∞—Ä–∫–∞–∑–º–æ–º."
            )
            return
        
        logger.info(f"User {user_id} sent an image document: {document.file_name}")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            file_info = await self.bot.get_file(document.file_id)
            doc_data = await self.bot.download_file(file_info.file_path)
            image_data = doc_data.read()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            caption = message.caption or ""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            analysis = await self.image_processor.analyze_image(image_data, caption)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
            await message.answer(analysis)
            logger.info(f"Document image analyzed successfully for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error analyzing document image for user {user_id}: {e}")
            await message.answer(
                "üö® –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–≤–æ–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º... —Å–ª–æ–∂–Ω—ã–π –¥–ª—è –º–æ–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è."
            )


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("Starting sarcastic bot...")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        dp = Dispatcher()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        BotHandlers(bot, dp)
        
        logger.info("Bot handlers registered successfully")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("Starting polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        logger.info("Bot stopped")
